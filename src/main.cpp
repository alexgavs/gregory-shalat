#include "Arduino.h"

// Key

#define NELEMS(x) (sizeof(x) / sizeof((x)[0]))



const PROGMEM int Key1[] = // butt1 offer universal
{
-26, 2810, 828, 582, 839, 577, 841, 582, 840, 584, 831, 588, 835, 584, 831, 582, 839, 585, 477, 942,841, 577, 845, 574, 484, 938, 842, 580, 842, 582, 834, 580, 837, 582, 840, 579, 844, 571, 843, 573, 847, 585, 834, 581, 840, 579, 836, 582, 849, 572, 477, 945, 837, 581, 837, 585, 473, 946, 476, 942, 845, 575, 843, 579, 839, 574, 846, 577, 845, 578, 841, 578, 836, 580, 847, 570, 485, 943, 476, 945, 840, 576, 481, 941, 488, 930, 485, 559, 857, 571, 856, 568, 843, 570, 855, 568, 487, 932, 488, 930, 854, 570, 487, 938, 851, 565, 857, 608
};

const int PROGMEM Key2[] = // butt2 universal
{
-26, 2687, 888, 530, 891, 529, 889, 530, 891, 529, 889, 529, 891, 530, 888, 530, 890, 530, 522, 898, 890, 530, 888, 530, 524, 897, 889, 530, 891, 529, 889, 530, 890, 530, 889, 529, 891, 530, 889, 529, 890, 530, 889, 530, 890, 530, 888, 530, 891, 530, 521, 898, 891, 529, 889, 530, 524, 897, 522, 897, 891, 529, 889, 530, 890, 530, 889, 529, 891, 530, 888, 530, 890, 530, 889, 530, 523, 898, 521, 898, 891, 529, 522, 898, 523, 898, 521, 530, 891, 529, 889, 530, 890, 530, 889, 530, 524, 897, 521, 898, 890, 530, 522, 897, 891, 531, 887, 608
}; 

//114639,
const int PROGMEM Key3[] = // butt3 universal
    {-26, 2693, 922, 513, 921, 516, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 196, 108, 194, 506, 117, 187, 
          2854, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 196, 108, 194, 506, 117, 186, 
          2855, 921, 513, 922, 516, 921, 513, 922, 515, 922, 513, 921, 516, 921, 514, 921, 196, 108, 194, 506, 117, 187

//     2854, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 196, 108, 193, 507, 117, 186,
//     2854, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 196, 108, 194, 506, 117, 186,
//     2855, 921, 514, 921, 515, 921, 514, 921, 516, 921, 514, 921, 516, 921, 514, 921, 196, 108, 194, 506, 117, 186
};

const int PROGMEM Key4[] = // gregory  universal
{ //44+2
//-24, 733, 488, 1435, 1234, 696, 529, 1396, 1271, 668, 1269, 662, 1287, 654, 564, 1368, 1296, 646, 572, 1364, 1300, 640, 577, 1360, 1304, 635, 1305, 633, 1308, 630, 590, 1347, 1315, 626, 592, 1344, 1321, 620, 597, 1341, 1322, 666, 
//-24, 727, 494, 1420, 1255, 680, 539, 1395, 1271, 666, 1273, 663, 1276, 661, 563, 1371, 1296, 644, 573, 1363, 1300, 640, 579, 1357, 1307, 632, 1305, 634, 1308, 630, 590, 1347, 1318, 622, 596, 1341, 1321, 620, 599, 1337, 1328, 657, 
//-24, 718, 503, 1417, 1256, 679, 540, 1393, 1274, 665, 1274, 661, 1279, 659, 561, 1375, 1291, 648, 570, 1365, 1298, 641, 580, 1357, 1306, 632, 1310, 629, 1309, 630, 588, 1348, 1319, 622, 595, 1342, 1319, 622, 596, 1339, 1327, 660, 
//-24, 721, 500, 1418, 1253, 682, 539, 1395, 1270, 667, 1273, 662, 1281, 658, 560, 1374, 1292, 647, 571, 1365, 1301, 639, 579, 1356, 1307, 634, 1307, 629, 1312, 628, 590, 1347, 1315, 626, 594, 1342, 1322, 619, 601, 1336, 1326, 658, 
//-24, 725, 497, 1417, 1254, 683, 536, 1396, 1275, 662, 1276, 660, 1280, 660, 560, 1373, 1292, 648, 576, 1357, 1303, 641, 580, 1356, 1314, 623, 1313, 626, 1315, 624, 589, 1349, 1312, 627, 607, 1336, 1323, 609, 606, 1332, 1326, 662, 
-24, 724, 498, 1422, 1256, 677, 542, 1392, 1273, 665, 1271, 662, 1284, 648, 576, 1363, 1302, 638, 575, 1366, 1301, 637, 577, 1358, 1302, 639, 1302, 636, 1301, 642, 583, 1344, 1319, 627, 592, 1333, 1348, 594, 618, 1323, 1325, 661
};


const int PROGMEM Key5[] = // leonid big key 1
{
//-112,1137,802,1102,835,1068,867,1043,895,1017,918,1003,2471,1481,450,877,459,872,470,862,474,858,855,476,866,466,860,471,866,466,833,1445,494,835,497,835,505,829,886,445,883,451,885,446,886,447,510,823,864,1417,894,434,898,435,896,436,896,436,901,432,903,430,513,820,901,431,874,1405,525,804,528,807,529,805,531,802,533,804,531,800,540,795,536,799,892,1395,919,410,920,413,916,418,541,792,540,794,543,791,921,413,917,416,887,1392,538,792,544,791,547,786,926,409,549,785,544,791,926,407,924,409,905,1386,924,406,543,790,544,791,549,786,544,790,548,787,552,782,551,785,894,1384,935,395,923,409,927,407,548,786,550,785,548,786,929,404,929,405,
//-112,1128,809,1091,850,1058,876,1033,907,1013,913,1009,2465,1488,453,870,462,871,470,861,477,855,853,479,854,476,857,475,862,468,840,1439,491,839,497,836,503,830,882,450,884,448,891,441,886,446,514,818,864,1418,895,433,899,433,898,434,896,437,899,435,896,435,516,819,905,426,869,1410,521,808,529,805,533,800,532,803,535,800,530,803,540,796,540,794,895,1390,918,412,922,411,916,416,540,796,543,790,544,791,922,411,923,410,892,1387,540,791,544,790,543,791,929,405,543,792,548,786,924,410,928,405,901,1389,927,403,545,788,548,787,549,786,545,789,548,787,549,785,552,782,895,1385,923,406,932,401,940,394,542,791,553,783,554,780,941,393,926,407,
  -112,1131,813,1085,851,1057,877,1035,901,1019,912,1009,2471,1482,453,873,462,869,468,864,467,863,853,479,857,473,857,476,864,467,835,1444,491,837,505,828,503,830,885,448,884,447,888,445,888,444,507,825,869,1412,894,434,896,437,898,434,897,436,895,439,895,436,522,811,912,421,882,1397,530,798,535,801,532,801,530,804,535,800,535,799,542,792,536,798,892,1394,916,415,920,412,921,411,545,790,537,798,538,796,926,407,919,414,884,1394,539,793,542,791,546,789,924,410,551,782,548,788,941,393,922,411,909,1381,919,410,543,790,545,791,548,786,547,787,550,785,550,785,545,790,891,1388,928,400,931,404,924,408,559,775,551,785,554,778,931,405,923,409
};



const int PROGMEM Key6[] = // leonid small key 2
{
-113,1128,819,1080,852,1056,880,1028,905,1017,911,1008,2473,1481,455,869,464,867,468,863,477,855,859,473,859,471,859,472,865,466,841,1438,493,834,501,833,509,823,890,443,889,443,884,447,885,449,511,820,862,1419,896,432,898,434,898,434,896,438,903,428,895,438,530,803,922,410,871,1406,528,802,534,801,531,801,536,799,531,803,536,797,543,791,541,793,890,1397,534,796,553,781,917,416,923,412,537,795,540,795,543,790,924,410,889,1389,927,403,919,414,540,794,546,788,920,413,548,786,922,412,545,789,902,1387,539,792,928,405,553,781,548,787,544,789,551,784,552,782,554,780,898,1381,550,780,556,779,549,785,932,402,931,402,552,781,553,781,552,783,
-113,1125,819,1084,850,1055,879,1034,917,1002,910,1011,2472,1480,450,874,464,869,463,868,472,859,857,474,859,470,865,468,862,469,840,1440,493,833,507,826,501,833,881,450,895,437,884,448,888,444,511,822,864,1416,898,430,901,432,901,431,895,437,898,435,897,434,521,814,908,424,869,1409,521,808,530,803,530,804,540,795,532,801,537,796,540,795,536,797,890,1398,538,791,547,787,928,406,918,415,550,783,545,790,546,788,929,404,896,1383,922,407,922,411,540,794,543,790,928,407,547,787,929,404,545,788,907,1384,547,782,926,409,546,788,555,779,548,786,549,785,546,788,553,783,897,1380,547,784,555,779,561,774,932,401,928,406,550,783,552,783,552,782,
-113,1138,803,1099,837,1065,867,1044,892,1019,913,1008,2475,1477,453,872,462,870,470,861,473,858,860,472,859,471,864,468,864,468,839,1440,494,834,496,836,500,833,883,449,881,452,887,444,885,448,507,825,862,1418,902,426,898,435,907,425,900,433,899,433,900,432,522,812,903,429,873,1405,530,799,530,805,529,804,533,802,540,794,539,794,540,795,539,794,896,1391,537,792,543,792,927,406,921,413,543,790,542,793,541,792,933,401,896,1382,930,401,921,411,541,793,547,787,928,406,542,792,927,406,553,782,900,1390,546,783,926,408,548,786,547,787,550,784,552,782,547,788,550,784,891,1387,548,782,554,781,554,781,928,406,929,404,543,791,554,781,553,781
};

const int PROGMEM Key7[] = //yohav
{
  11590, 410, 257, 734, 604, 396, 272, 728, 613, 383, 284, 712, 628, 373, 294, 705, 632, 371, 297, 706, 629, 373, 628, 367, 302, 703, 0, 0
};


boolean lvl;

int blc;
int offDelay = 150;

#define pin PB2 //pin 1 transmitter
#define led PB1 // led output

void blink(uint8_t t)
{
  for (int y = 0; y < t; y++)
 {
digitalWrite(led, HIGH);
delay(150);
digitalWrite(led, LOW);
delay(50);
  }
}


void setup()
{
  pinMode(pin, OUTPUT);
  pinMode(led, OUTPUT);
  digitalWrite(led,LOW);
  // put your setup code here, to run once:
  lvl = LOW;
  //blink(5);
}

void KeySend(int *key, int size)
{
int tt=0;
lvl = LOW;

for (int t = 0; t < size; t++)
{
  tt = pgm_read_word_near(&key[t]);
  digitalWrite(pin, lvl);
  if (tt < 0)
    delay(abs(tt));
  else
    delayMicroseconds(tt); //- offDelay);
lvl = !lvl;
  }
  digitalWrite(pin, LOW);
}



void loop()
{
  //set_sleep_mode(SLEEP_MODE_PWR_DOWN); // sleep mode is set here
  //sleep_enable();

  //sleep_mode(); // System actually sleeps here

  //sleep_disable();
  //digitalWrite(led,!digitalRead(led));

 blink(1);
 for (int y = 1; y <= 15; y++) KeySend(Key1, NELEMS(Key1)); // offfer
 delay(200);

 blink(2);
 for (int y = 1; y <= 5; y++)  KeySend(Key4, NELEMS(Key4)); //gregory
 delay(200);

 blink(3);
 for (int y = 1; y <= 5; y++)  KeySend(Key5, NELEMS(Key5)); //leonid open

 delay(1000);
 blink(4);
 for (int y = 1; y <= 3; y++)  KeySend(Key6, NELEMS(Key6)); //leonid close

 blink(5);
 for (int y = 1; y <= 3; y++)  KeySend(Key7, NELEMS(Key7)); //yoav gate

}
